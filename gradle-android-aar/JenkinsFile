node {
    
    def imageDroid =  docker.image('yodafrog.sas.jfrog.internal:5001/jenkins-android-slave')
    imageDroid.pull()
    imageDroid.inside('-v /etc/passwd:/etc/passwd -v /tmp/:/tmp/') 
    {
        def artServer = Artifactory.server('yodafrog')
        artServer.credentialsId='yodafrog-ci'
        def buildInfo = Artifactory.newBuildInfo()
        stage 'Checkout Gradle'
            git url: 'https://github.com/jroquelaure/demo-jfrog-android.git'
    // dir('gradle-examples/4/gradle-example-ci-server') {
    //  sh './increment.sh'
    // }

        stage 'Build Gradle'
        
            def artifactoryGradle = Artifactory.newGradleBuild()
            artifactoryGradle.tool = 'GRADLE_TOOL' // Tool name from Jenkins configuration
            artifactoryGradle.deployer repo:'android-dev-local', server: artServer
            artifactoryGradle.resolver repo:'android-jon', server: artServer
            artifactoryGradle.run rootDir: "gradle-android-aar/", buildFile: 'build.gradle', tasks: 'clean artifactoryPublish', buildInfo: buildInfo

            artServer.publishBuildInfo buildInfo
    }
}

node {
    git url: 'https://github.com/jroquelaure/demo-jfrog-android.git'
    def artServer = Artifactory.server('yodafrog')
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'yodafrog-ci',
    usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
    def uname=env.USERNAME
    def pw=env.PASSWORD
    artServer.username=uname
    artServer.password=pw      
    def curlstr="curl -H 'X-JFrog-Art-Api:$pw' '$artServer.url" 
    dir('docker-app')
        {
            stage('test')
            {
                //TODO
            }
        
            stage('Xray scan')
            {
                def xrayConfig = [
                    //Mandatory parameters
                    'buildName'         : env.JOB_NAME,
                    'buildNumber'       : env.BUILD_NUMBER,

                    //Optional
                    'failBuild'        : false
                ]

                // Scan xray build
                def xrayResults = artServer.xrayScan xrayConfig
                // Print full report from xray
                echo xrayResults as String
            }

            stage('promote') 
            {
                def promotionConfig = [
                // Mandatory parameters
                'buildName'          : env.JOB_NAME,
                'buildNumber'        : env.BUILD_NUMBER,
                'targetRepo'         : 'libs-release-local',

                // Optional parameters
                'comment'            : 'ready for release',
                'sourceRepo'         : 'libs-dev-local',
                'status'             : 'Released',
                'includeDependencies': true,
                'copy'               : true
                ]
                // Promote build
               // artServer.promote promotionConfig
            }
        }
        stage('distribute')
            {

                def distributionConfig = [
                    // Mandatory parameters
                    'buildName'             : env.JOB_NAME,
                    'buildNumber'           : env.BUILD_NUMBER,
                    'targetRepo'            : 'butler-webinar',
                        
                    // Optional parameters
                    'publish'               : true, // Default: true. If true, artifacts are published when deployed to Bintray.
                    'overrideExistingFiles' : true, // Default: false. If true, Artifactory overwrites builds already existing in the target path in Bintray.
                    'async'                 : false, // Default: false. If true, the build will be distributed asynchronously. Errors and warnings may be viewed in the Artifactory log.
                    "sourceRepos"           : ["android-release-local"], // An array of local repositories from which build artifacts should be collected.
                    'dryRun'                : false, // Default: false. If true, distribution is only simulated. No files are actually moved.
                ]

                //artServer.distribute distributionConfig
           
            }
    }
}